from django.shortcuts import render, get_object_or_404, redirect, reverse
from django.http import HttpResponseRedirect
from django.views.generic import TemplateView
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.conf import settings
from django.views.generic import ListView, DetailView
from product.models import Product
from .models import Cart, CartItem, Order, OrderItem, Payment
import stripe
import string
import random

stripe.api_key = settings.STRIPE_SECRET_KEY


class HomeView(TemplateView):
    # View for home page of site.
    template_name = 'home.html'


class OrderListView(ListView):
    model = Order
    context_object_name = 'orders'
    template_name = 'orders_list.html'

    def get_queryset(self):
        return Order.objects.filter(user=self.request.user)


class OrderDetailView(DetailView):
    model = Order
    context_object_name = 'order'
    template_name = 'order_detail.html'


def profile_view(request):
    return render(request, 'profile.html', {})


def create_ref_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))


@login_required
def add_to_cart(request, product_slug):
    product = get_object_or_404(Product, slug=product_slug)
    cart_item = CartItem.objects.create(product=product)
    cart, created = Cart.objects.get_or_create(user=request.user)
    cart.items.add(cart_item)
    cart.save()
    messages.info(request, product.name + ' is added to your cart')
    return HttpResponseRedirect(request.META.get("HTTP_REFERER"))


@login_required
def remove_from_cart(request, cart_item_slug):
    cart_item = get_object_or_404(CartItem, slug=cart_item_slug)
    cart = Cart.objects.get(user=request.user)
    cart.items.remove(cart_item)
    cart_item.delete()
    cart.save()
    messages.info(request, cart_item.product.name + " successfully removed from your cart.")
    return HttpResponseRedirect(request.META.get("HTTP_REFERER"))


@login_required
def cart_view(request):
    cart = get_object_or_404(Cart, user=request.user)
    context = {
        'cart': cart
    }
    return render(request, 'cart.html', context)


@login_required
def thankyou(request):
    return render(request, 'thankyou.html', {})


@login_required
def checkout(request):
    cart = get_object_or_404(Cart, user=request.user)

    if request.method == "POST":

        try:
            # complete the order
            cart.ref_code = create_ref_code()

            # create stripe charge
            # `source` is obtained with Stripe.js; see https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token
            token = request.POST.get('stripeToken')
            charge = stripe.Charge.create(
                amount=int(cart.get_total() * 100),  # in cents, need to times 100
                currency="usd",
                source=token,  # obtained with Stripe.js
                description=f"Charge for {request.user.username}",
            )

            # create our payment object and link to the order
            payment = Payment()
            payment.cart = cart
            payment.stripe_charge_id = charge.id  # charge.id generated by stripe
            payment.total_amount = cart.get_total()
            payment.save()

            # add the order to the history list
            order = Order.objects.create(
                user=request.user,
                ref_code=cart.ref_code
            )

            for cart_item in cart.items.all():
                order_item = OrderItem.objects.create(product=cart_item.product)
                order.items.add(order_item)
                cart.items.remove(cart_item)
                cart_item.delete()
            order.save()
            cart.save()

            # redirect to a thank you page with continue shopping
            return redirect('controller:thankyou')

        # send email to yourself
        except stripe.error.CardError as e:
            # Since it's a decline, stripe.error.CardError will be caught
            # print('Status is: %s' % e.http_status)
            # print('Type is: %s' % e.error.type)
            # print('Code is: %s' % e.error.code)
            # # param is '' in this case
            # print('Param is: %s' % e.error.param)
            # print('Message is: %s' % e.error.message)
            messages.error(request, "There was a card error.")
            return redirect(reverse("controller:checkout"))
        except stripe.error.RateLimitError as e:
            # Too many requests made to the API too quickly
            messages.error(request, "There was a rate limit error on Stripe.")
            return redirect(reverse("controller:checkout"))
        except stripe.error.InvalidRequestError as e:
            # Invalid parameters were supplied to Stripe's API
            messages.error(request, "Invalid parameters for Stripe request.")
            return redirect(reverse("controller:checkout"))
        except stripe.error.AuthenticationError as e:
            # Authentication with Stripe's API failed
            # (maybe you changed API keys recently)
            messages.error(request, "Invalid Stripe API keys.")
            return redirect(reverse("controller:checkout"))
        except stripe.error.APIConnectionError as e:
            # Network communication with Stripe failed
            messages.error(request, "There was a network error. Please try again.")
            return redirect(reverse("controller:checkout"))
        except stripe.error.StripeError as e:
            # Display a very generic error to the user, and maybe send yourself an email
            messages.error(request, "There was an error. Please try again.")
            return redirect(reverse("controller:checkout"))
        except Exception as e:
            # Something else happened, completely unrelated to Stripe
            messages.error(
                request, "There was a serious error. We are working to resolve the issue.")
            return redirect(reverse("controller:checkout"))

    context = {
        'cart': cart
    }
    return render(request, 'checkout.html', context)
